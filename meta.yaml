# SOURCE: https://github.com/conda/conda-build/blob/84818bc3bbe26f112dfa177f1a49057221599f74/tests/test-recipes/metadata/jinja_load_yaml/meta.yaml
# SOURCE: https://github.com/conda-forge/staged-recipes

# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe
# If your package is python based, we recommend using Grayskull to generate it instead:
# https://github.com/conda-incubator/grayskull

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "fastapi_pytorch_postgresql_sandbox" %}
{% set version = "0.1.0" %}
{% set env = load_file_data("environment.yml", "yaml", from_recipe_dir=True) %}
{% set deps = env.get("dependencies", []) %}

package:
  name: {{ name|lower }}
  version: {{ version }}

# Source from a local pathÔÉÅ
# If the path is relative, it is taken relative to the recipe directory. The source is copied to the work directory before building.
source:
  path: ../fastapi_pytorch_postgresql_sandbox

# Specifies the build and runtime requirements. Dependencies of these requirements are included automatically.
requirements:
  # This section was added in conda-build 3.0. It represents packages that need to be specific to the target platform when the target platform is not necessarily the same as the native build platform. For example, in order for a recipe to be "cross-capable", shared libraries requirements must be listed in the host section, rather than the build section, so that the shared libraries that get linked are ones for the target platform, rather than the native build platform. You should also include the base interpreter for packages that need one. In other words, a Python package would list python here and an R package would list mro-base or r-base.
  # host:
  #   - python
  # Tools required to build the package. These packages are run on the build system and include things such as revision control systems (Git, SVN) make tools (GNU make, Autotool, CMake) and compilers (real cross, pseudo-cross, or native when not cross-compiling), and any source pre-processors.
  # Packages which provide "sysroot" files, like the CDT packages (see below) also belong in the build section.
  build:
    - {{ deps[0].replace("=", " =") }}
    - pip

  # Packages required to run the package. These are the dependencies that are installed automatically whenever the package is installed. Package names should follow the package match specifications.
  run:
  {% for dep in deps -%}
    - {{ dep.replace("=", " =") }}
  {% endfor %}

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # More info about selectors can be found in the conda-build docs:
  # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
  script: {{ PYTHON }} -m pip install . -vv
  # 4. What does the build: 0 entry mean?
  # The build number is used when the source code for the package has not changed but you need to make a new build. For example, if one of the dependencies of the package was not properly specified the first time you build a package, then when you fix the dependency and rebuild the package you should increase the build number.
  # When the package version changes you should reset the build number to 0.
  number: 0

test:
  imports:
    - fastapi_pytorch_postgresql_sandbox
